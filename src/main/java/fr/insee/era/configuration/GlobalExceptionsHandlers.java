package fr.insee.era.configuration;

import fr.insee.era.extraction_rp_famille.model.exception.CommuneInconnueException;
import fr.insee.era.extraction_rp_famille.model.exception.PasDeBIDuBonSexeException;
import fr.insee.era.extraction_rp_famille.model.exception.RimInconnueException;
import lombok.extern.slf4j.Slf4j;
import org.apache.catalina.connector.ClientAbortException;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

@ControllerAdvice
@Slf4j
public class GlobalExceptionsHandlers {

    @ExceptionHandler({DataAccessException.class})
    public ResponseEntity<String> exceptionBaseDeDonnee(final HttpServletRequest req, final DataAccessException exception) {
        log.error("exceptionBaseDeDonnee  : ",exception);
        return new ResponseEntity<>("Erreur d'accès aux bases de données du RP ", HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler({AccessDeniedException.class})
    public ResponseEntity<String> accessRefuse(final HttpServletRequest req, final AccessDeniedException exception) {
        log.error("accessRefuse  : ",exception);
        return new ResponseEntity<>("Accès refusé", HttpStatus.FORBIDDEN);
    }


    @ExceptionHandler({IOException.class})
    public ResponseEntity<String> exceptionEntreeSortie(final HttpServletRequest req, final IOException exception) {
        log.error("exceptionEntreeSortie  : ",exception);
        return new ResponseEntity<>("Erreur d'entree/sortie ", HttpStatus.INTERNAL_SERVER_ERROR);
    }


    @ExceptionHandler({ CommuneInconnueException.class})
    public ResponseEntity<String> exceptionCommuneInconnue(final HttpServletRequest req, final CommuneInconnueException exception) {
        log.info("CommuneInconnueException  : ",exception.getMessage());
        return new ResponseEntity<>(exception.getMessage(), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler({ RimInconnueException.class})
    public ResponseEntity<String> rimInconnueException(final HttpServletRequest req, final RimInconnueException exception) {
        log.info("rimInconnueException  : ",exception.getMessage());
        return new ResponseEntity<>(exception.getMessage(), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler({ PasDeBIDuBonSexeException.class})
    public ResponseEntity<String> pasDeBIDuBonSexeException(final HttpServletRequest req, final PasDeBIDuBonSexeException exception) {
        log.info("pasDeBIDuBonSexeException  : ",exception.getMessage());
        return new ResponseEntity<>(exception.getMessage(), HttpStatus.NOT_FOUND);
    }
    @ExceptionHandler(ClientAbortException.class)
    public void handleLockException(ClientAbortException exception, HttpServletRequest request) {
        final String message = "ClientAbortException generated by request {} {} from remote address {} with X-FORWARDED-FOR {}";
        final String headerXFF = request.getHeader("X-FORWARDED-FOR");
        log.warn(message, request.getMethod(), request.getRequestURL(), request.getRemoteAddr(), headerXFF);
    }
}
